import re
from ..Family import Family
import gzip


REGION_REGEX = re.compile(r'.*?([^\|]+)/(.+)')


class HMMERFamily(Family):
    """
    A protein family, constructed from the result of a HMMER search.

    .. warning:: This class is not intended to parse arbitrary Stockholm
    formatted files, only those generated by HMMER.

    Parameters
    ----------
    sh_file : file_like
        A Stockholm formatted alignment generated by HMMER.
    rename_entries : bool
        Attempt to rename protein entries to their accessions, to allow
        comparison with Pfam families.
    """
    def __init__(self, sh_file, rename_entries=False):
        super().__init__()
        self._rename_entries = rename_entries
        self._parse(sh_file)

    @classmethod
    def load_gzip(cls, filename, rename_entries=False):
        """
        Open a gzip file, and parse it.

        Parameters
        ----------
        filename : str
            The path to a gzipped Stockholm formatted alignment generated by
            HMMER
        """
        with gzip.open(filename, 'rt') as sh_file:
            fam = cls(sh_file, rename_entries=rename_entries)
        return fam

    def _parse(self, sh_file):
        # Parse sh_file in order to populate the Family's regions. This is
        # pretty rudimentary. It's possible that HMMER can produce files that
        # this will fail to parse correctly.
        for line in sh_file:
            try:
                components = line.split()
                if components[0] == "#=GS":
                    entry, range_ = REGION_REGEX.match(components[1]).groups()
                    # Attempt to convert protein entries to accessions by
                    # truncation. This is almost certainly not universally
                    # correct. The correct solution would involve a database
                    # query.
                    if self._rename_entries:
                        acc = entry.split('_')[0]
                    else:
                        acc = entry
                    start, end = map(int, range_.split('-'))
                    self.add_region(acc, start, end)
                else:
                    # In HMMER produced Stockholm files, the GS annotations
                    # always precede the alignment. Once we reach the
                    # alignment we can stop parsing.
                    identifier = REGION_REGEX.match(components[0])
                    if identifier:
                        break
            except IndexError:
                continue
